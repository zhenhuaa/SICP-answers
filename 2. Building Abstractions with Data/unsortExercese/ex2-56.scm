#! /usr/bin/env csi -s

(define (make-exponentiation base exp)
  (cond ((= 0 exp) 1)
        ((= 1 exp) base)
        (else (list '^ base exp))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '^)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)  (deriv (multiplicand exp) var))
                   (make-product (multiplicand exp) (deriv (multiplier exp) var))))
        ((exponentiation? exp)
         (make-product (make-product (exponent exp)
                                     (make-exponentiation (base exp) (make-sum (exponent exp) -1)))
                       (deriv (base exp) var)))
        (else (error "unknown expression type -- DERIV" exp))))
