#! /usr/bin/env csi -s

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2) (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (sum? x) (and (pair? x) (eq? (car x) '+)))
(define (product? x) (and (pair? x) (eq? (car x) '*)))
(define (make-sum x y) (list '+ x y))
(define (make-product x y) (list '* x y))
(define (addend x) (cadr x))
(define (augend x) (caddr x))
(define (multiplier x) (cadr x))
(define (multiplicand x) (caddr x))

(define (=number? exp num)
  (and (number? exp) (= exp num)))

(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))

(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
        ((=number? m2 1) m1)
        ((and (=number? m1 1) (=number? m2 1)) (* m1 m2))
        (else (list '* m1 m2))))

(define (make-exponentiation base exp)
  (cond ((= 0 exp) 1)
        ((= 1 exp) base)
        (else (list '^ base exp))))
(define (exponentiation? x) (and (pair? x) (eq? (car x) '^)))
(define (base x) (cadr x))
(define (exponent x) (caddr x))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var) 1 0))
        ((sum? exp)
         (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var)))
        ((product? exp)
         (make-sum (make-product (multiplier exp)  (deriv (multiplicand exp) var))
                   (make-product (multiplicand exp) (deriv (multiplier exp) var))))
        ((exponentiation? exp)
         (make-product (make-product (exponent exp)
                                     (make-exponentiation (base exp) (make-sum (exponent exp) -1)))
                       (deriv (base exp) var)))
        (else (error "unknown expression type -- DERIV" exp))))

(use test)
(test 1 (deriv (make-exponentiation 'x 1) 'x))
(test 0 (deriv (make-exponentiation 'x 0) 'x))
(test '(* 3 (^ x 2)) (deriv (make-exponentiation 'x 3) 'x))
